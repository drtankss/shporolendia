# –§–∞–π–ª—ã –¥–ª—è –¥–µ–ø–ª–æ—è –±–æ—Ç–∞ "–®–ø–æ—Ä–æ–ª–∞–Ω–¥–∏—è" –≤ Railway

## 1. requirements.txt
```
python-telegram-bot==20.7
```

## 2. runtime.txt
```
python-3.11.0
```

## 3. Procfile
```
web: python bot.py
```

## 4. railway.json
```json
{
  "$schema": "https://railway.app/railway.schema.json",
  "build": {
    "builder": "NIXPACKS"
  },
  "deploy": {
    "startCommand": "python bot.py",
    "restartPolicyType": "ON_FAILURE",
    "restartPolicyMaxRetries": 10
  }
}
```

## 5. .env (—Å–æ–∑–¥–∞–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ –≤ git)
```
BOT_TOKEN=your_actual_bot_token_here
```

## 6. –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π bot.py (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
```python
import logging
import os
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('8119239168:AAG9dAm1rgDX9wBU4L-F6KXJyHe-C3SNsn4')
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

class ShporolandiaBot:
    def __init__(self):
        # –î–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–∞–ª–µ
        self.channel_info = """
üèüÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –®–ø–æ—Ä–æ–ª–∞–Ω–¥–∏—é!**

–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ:
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫–ª—É–±–µ
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π –∏ —Ç–∞–∫—Ç–∏–∫–∏
‚Ä¢ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω—ã–µ —Å–ª—É—Ö–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤—å—é —Å –∏–≥—Ä–æ–∫–∞–º–∏
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∫–ª—É–±–∞ –∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã

**COYS!** (Come On You Spurs!) ü§çüíô

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É –ø—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–Ω–∞—Ç–æ–≤ –®–ø–æ—Ä!
        """
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        self.recent_matches = [
            {
                "date": "15.07.2025",
                "opponent": "–ê—Ä—Å–µ–Ω–∞–ª",
                "result": "2-1",
                "competition": "–î—Ä—É–∂–µ—Å–∫–∏–π –º–∞—Ç—á",
                "scorers": "–°–æ–Ω –•—ã–Ω –ú–∏–Ω, –ú—ç–¥–∏—Å–æ–Ω"
            },
            {
                "date": "12.07.2025", 
                "opponent": "–õ–∏–≤–µ—Ä–ø—É–ª—å",
                "result": "1-3",
                "competition": "–î—Ä—É–∂–µ—Å–∫–∏–π –º–∞—Ç—á",
                "scorers": "–ö—É–ª—É—à–µ–≤—Å–∫–∏"
            },
            {
                "date": "08.07.2025",
                "opponent": "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥", 
                "result": "2-0",
                "competition": "–î—Ä—É–∂–µ—Å–∫–∏–π –º–∞—Ç—á",
                "scorers": "–†–∏—à–∞—Ä–ª–∏—Å–æ–Ω, –°–æ–Ω –•—ã–Ω –ú–∏–Ω"
            }
        ]
        
        # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π
        self.upcoming_matches = [
            {
                "date": "25.07.2025",
                "time": "20:00",
                "opponent": "–ß–µ–ª—Å–∏",
                "competition": "–î—Ä—É–∂–µ—Å–∫–∏–π –º–∞—Ç—á",
                "venue": "–£—ç–º–±–ª–∏"
            },
            {
                "date": "17.08.2025",
                "time": "17:30", 
                "opponent": "–õ–µ—Å—Ç–µ—Ä –°–∏—Ç–∏",
                "competition": "–ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞",
                "venue": "–¢–æ—Ç—Ç–µ–Ω—Ö—ç–º –•–æ—Ç—Å–ø—É—Ä –°—Ç—ç–¥–∏—É–º"
            },
            {
                "date": "24.08.2025",
                "time": "15:00",
                "opponent": "–≠–≤–µ—Ä—Ç–æ–Ω",
                "competition": "–ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞", 
                "venue": "–ì—É–¥–∏—Å–æ–Ω –ü–∞—Ä–∫"
            }
        ]
        
        # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
        self.social_media = {
            "telegram": "@tottenham_news_channel",
            "tiktok": "@tottenham_official",
            "admin": "@admin_username",
            "owner": "@owner_username"
        }

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üèüÔ∏è –ü—Ä–æ –∫–∞–Ω–∞–ª", callback_data='channel_info')],
            [InlineKeyboardButton("‚öΩ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏", callback_data='recent_matches')],
            [InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π", callback_data='upcoming_matches')],
            [InlineKeyboardButton("üì± –°–æ—Ü. —Å–µ—Ç–∏", callback_data='social_media')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = """
ü§çüíô **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –®–ø–æ—Ä–æ–ª–∞–Ω–¥–∏—é!** 

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:
        """
        
        await update.message.reply_text(
            welcome_text, 
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'channel_info':
            await self.show_channel_info(query)
        elif query.data == 'recent_matches':
            await self.show_recent_matches(query)
        elif query.data == 'upcoming_matches':
            await self.show_upcoming_matches(query)
        elif query.data == 'social_media':
            await self.show_social_media(query)
        elif query.data == 'back_to_menu':
            await self.show_main_menu(query)

    async def show_channel_info(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            self.channel_info,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def show_recent_matches(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏"""
        text = "‚öΩ **–ü–û–°–õ–ï–î–ù–ò–ï –ú–ê–¢–ß–ò –¢–û–¢–¢–ï–ù–•–≠–ú–ê**\n\n"
        
        for match in self.recent_matches:
            text += f"üìÖ {match['date']}\n"
            text += f"üÜö –¢–æ—Ç—Ç–µ–Ω—Ö—ç–º {match['result']} {match['opponent']}\n"
            text += f"üèÜ {match['competition']}\n"
            text += f"‚öΩ –ì–æ–ª—ã: {match['scorers']}\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def show_upcoming_matches(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π"""
        text = "üìÖ **–†–ê–°–ü–ò–°–ê–ù–ò–ï –ú–ê–¢–ß–ï–ô –¢–û–¢–¢–ï–ù–•–≠–ú–ê**\n\n"
        
        for match in self.upcoming_matches:
            text += f"üìÖ {match['date']} –≤ {match['time']}\n"
            text += f"üÜö –¢–æ—Ç—Ç–µ–Ω—Ö—ç–º vs {match['opponent']}\n"
            text += f"üèÜ {match['competition']}\n"
            text += f"üèüÔ∏è {match['venue']}\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def show_social_media(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"""
        text = f"""
üì± **–ù–ê–®–ò –°–û–¶–ò–ê–õ–¨–ù–´–ï –°–ï–¢–ò**

üì¢ **Telegram –∫–∞–Ω–∞–ª:** {self.social_media['telegram']}
üéµ **TikTok:** {self.social_media['tiktok']}

üëë **–í–ª–∞–¥–µ–ª–µ—Ü:** {self.social_media['owner']}
‚öôÔ∏è **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {self.social_media['admin']}

–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –Ω–∞—à–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –¢–æ—Ç—Ç–µ–Ω—Ö—ç–º–µ! ü§çüíô
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def show_main_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üèüÔ∏è –ü—Ä–æ –∫–∞–Ω–∞–ª", callback_data='channel_info')],
            [InlineKeyboardButton("‚öΩ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏", callback_data='recent_matches')],
            [InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π", callback_data='upcoming_matches')],
            [InlineKeyboardButton("üì± –°–æ—Ü. —Å–µ—Ç–∏", callback_data='social_media')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = """
ü§çüíô **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –®–ø–æ—Ä–æ–ª–∞–Ω–¥–∏—é!** 

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:
        """
        
        await query.edit_message_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = ShporolandiaBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CallbackQueryHandler(bot.button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("ü§çüíô –®–ø–æ—Ä–æ–ª–∞–Ω–¥–∏—è –∑–∞–ø—É—â–µ–Ω–∞! COYS!")
    application.run_polling()

if __name__ == '__main__':
    main()
```

## 7. .gitignore
```
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
.env

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/
env.bak/
venv.bak/

# IDE
.vscode/
.idea/
*.swp
*.swo

# Logs
*.log

# OS
.DS_Store
Thumbs.db
```

## –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–µ–ø–ª–æ—é –≤ Railway:

### 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞:
1. –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ [Railway.app](https://railway.app)
2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —É @BotFather –≤ Telegram

### 2. –î–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ GitHub:
1. –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub
2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã (–∫—Ä–æ–º–µ .env)
3. –í Railway: New Project ‚Üí Deploy from GitHub repo
4. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π

### 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:
1. –í –ø–∞–Ω–µ–ª–∏ Railway –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Variables
2. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é:
   - **Name:** `BOT_TOKEN`
   - **Value:** –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç BotFather

### 4. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ CLI:
```bash
# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Railway CLI
npm install -g @railway/cli

# –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç
railway login

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–µ–∫—Ç
railway init

# –î–µ–ø–ª–æ–π
railway up
```

### 5. –§–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –ª–æ–≥–∞—Ö Railway
- –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram
- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–µ–ø–ª–æ–π –ø—Ä–∏ –ø—É—à–∞—Ö –≤ GitHub

–í–∞—à –±–æ—Ç "–®–ø–æ—Ä–æ–ª–∞–Ω–¥–∏—è" –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å 24/7 –Ω–∞ Railway! ü§çüíô
